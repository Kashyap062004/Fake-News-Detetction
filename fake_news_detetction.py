# -*- coding: utf-8 -*-
"""Fake News Detetction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSBKX5EC1QlLOTRFhnaKvPUnRzpzgRdB
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')

df = pd.read_csv("/kaggle/input/fake-news-classification/WELFake_Dataset.csv")

df.head()

df = df.drop(columns= ['Unnamed: 0'])
df.dropna(inplace = True)

df.info()

df.shape

duplicates = df[['title','text']].duplicated().sum()
print("Number of duplicates:", duplicates)

df = df.drop_duplicates(subset=['title', 'text'], keep='first')

df['content'] = df['title'] + " " + df['text']
df = df.drop(columns = ['title' , 'text'])

df.head()

import pandas as pd
import re
import string
from bs4 import BeautifulSoup
from nltk.corpus import stopwords
from multiprocessing import Pool, cpu_count
import numpy as np

# Setup
stop_words = set(stopwords.words('english'))
translator = str.maketrans('', '', string.punctuation)

# Remove emojis
def remove_emojis(text):
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"
        "\U0001F300-\U0001F5FF"
        "\U0001F680-\U0001F6FF"
        "\U0001F1E0-\U0001F1FF"
        "\U00002700-\U000027BF"
        "\U0001F900-\U0001F9FF"
        "\U00002600-\U000026FF"
        "\U00002B00-\U00002BFF"
        "\U0001FA70-\U0001FAFF"
        "]+",
        flags=re.UNICODE
    )
    return emoji_pattern.sub(r'', text)

# Preprocessing function
def preprocess(text):
    text = text.lower()  # lowercase
    text = BeautifulSoup(text, "html.parser").get_text()  # remove HTML
    text = re.sub(r'http\S+|www.\S+', '', text)  # remove URLs
    text = text.translate(translator)  # remove punctuation
    text = remove_emojis(text)  # remove emojis
    text = ' '.join([w for w in text.split() if w not in stop_words])  # remove stopwords
    return text

# Multiprocessing for large datasets
def parallelize_dataframe(df, func, n_cores=None):
    if n_cores is None:
        n_cores = cpu_count()
    df_split = np.array_split(df, n_cores)
    pool = Pool(n_cores)
    df = pd.concat(pool.map(func, df_split))
    pool.close()
    pool.join()
    return df

def apply_preprocess(df_chunk):
    df_chunk['content'] = df_chunk['content'].apply(preprocess)
    return df_chunk

# Apply preprocessing
df = parallelize_dataframe(df, apply_preprocess)

from nltk.stem import PorterStemmer
ps = PorterStemmer()

def porter_stem_text(text):
    # Split text into words
    words = text.split()
    # Apply Porter Stemmer to each word
    stemmed_words = [ps.stem(w) for w in words]
    # Join back to a string
    return ' '.join(stemmed_words)

from multiprocessing import Pool, cpu_count
import numpy as np

def parallelize_dataframe(df, func, n_cores=None):
    if n_cores is None:
        n_cores = cpu_count()
    df_split = np.array_split(df, n_cores)
    pool = Pool(n_cores)
    df = pd.concat(pool.map(func, df_split))
    pool.close()
    pool.join()
    return df

def apply_stem(df_chunk):
    df_chunk['content'] = df_chunk['content'].apply(porter_stem_text)
    return df_chunk

df = parallelize_dataframe(df, apply_stem)

df['content'][0]

X = df['content']
y = df['label']

from sklearn.model_selection import train_test_split
X = df['content']
y = df['label']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Chunk 1: Word2Vec embeddings
from gensim.models import Word2Vec
import numpy as np

sentences = [text.split() for text in list(X_train) + list(X_test)]

w2v_model = Word2Vec(sentences, vector_size=100, window=5, min_count=2, workers=4, sg=1, epochs=5)

def get_vector(text, model, size=100):
    words = text.split()
    vecs = [model.wv[w] for w in words if w in model.wv]
    if len(vecs) == 0:
        return np.zeros(size)
    return np.mean(vecs, axis=0)

X_train_w2v = np.vstack([get_vector(text, w2v_model, 100) for text in X_train])
X_test_w2v  = np.vstack([get_vector(text, w2v_model, 100) for text in X_test])

# Chunk 2: RandomForest classifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

rf = RandomForestClassifier(n_estimators=200, random_state=42, n_jobs=-1)
rf.fit(X_train_w2v, y_train)

y_pred = rf.predict(X_test_w2v)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))



